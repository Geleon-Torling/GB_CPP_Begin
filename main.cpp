#include <iostream>
#include "main.h"

/*
1.Написать программу, вычисляющую выражение a* (b + (c / d)) и выводящую результат с плавающей точкой, где a, b, c, d – целочисленные константы;
2.Дано целое число, выведите на экран разницу между этим числом и числом 21. Если же заданное число больше, чем 21, необходимо вывести удвоенную разницу 
между этим числом и 21. При выполнении задания следует использовать тернарный оператор.
3*. Написать программу, вычисляющую выражение из первого задания, а переменные для неё инициализировать в другом файле
4*. Описать трёхмерный целочисленный массив, размером 3х3х3, указатель на значения внутри массива и при помощи операции разыменования вывести на экран 
значение центральной ячейки получившегося куба[1][1][1]
*/

using namespace std;


#define I	3
#define J	3
#define K	3

int main(void)
{
	/*1.Написать программу, вычисляющую выражение a* (b + (c / d)) и выводящую результат с плавающей точкой, где a, b, c, d – целочисленные константы;*/

	extern const int a;
	extern const int b;
	extern const int c;
	extern const int d;

	float fRes = a * (b + (static_cast<float>(c) / d));

	/*2.Дано целое число, выведите на экран разницу между этим числом и числом 21. Если же заданное число больше, чем 21, необходимо вывести удвоенную разницу */

	int iNumber = 20;

	cout << "Result is :" << ((iNumber < 21) ? (21 - iNumber) : ((iNumber - 21) * 2)) << " , result is " << ((iNumber < 21) ? "normal" : "double") << endl;


	
	/* 4 * .Описать трёхмерный целочисленный массив, размером 3х3х3, указатель на значения внутри массива и при помощи операции разыменования вывести на экран
		значение центральной ячейки получившегося куба[1][1][1] */

	int iArray[I][J][K];

	int iTemp = 0;

	int *pTemp = 0;
	int iCenter = 0;

	for(int i = 0; i < I; i++)
	{
		for (int j = 0; j < J; j++)
		{
			for (int k = 0; k < K; k++)
			{
				iArray[i][j][k] = iTemp ++;
			}
		}
	}

	// выводим "середину"
	cout << "Center of Array[3][3][3] is : " << iArray[1][1][1] <<  endl;

	// способ ровно середины ))
	pTemp = (int*)iArray + (((I * J * K)/2));

	cout << "Access from pointer : " << *pTemp << endl;

	// простой и неинтересный способ
	int *pa;
	pa = &iArray[1][1][1];

	cout << "Access from simple pointer : " << *pa << endl;

	return 0;
}